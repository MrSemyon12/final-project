{"version":3,"sources":["../src/snakegame/index.js"],"names":["canvas","ctx","GRID_SIZE","BG_COLOUR","SNAKE_COLOUR","FOOD_COLOUR","FRAME_RATE","gameActive","localData","last_score","best_score","ls","JSON","parse","localStorage","getItem","console","log","player","pos","x","y","vel","snake","food","init","document","getElementById","getContext","width","height","fillStyle","fillRect","randomFood","addEventListener","keydown","e","keyCode","paintGame","size","paintPlayer","cell","Math","floor","random","checkWall","gameLoop","push","length","shift","cnt","endGame","setItem","stringify","alert","startGameInterval","interval","setInterval","clearInterval"],"mappings":";AAgNiB,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,oBAAA,QAAA,EAAA,OAAA,WAAA,EAAA,cAAA,IAAA,EAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,KAAA,IAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAhNjB,IAMIA,EAAQC,EANNC,EAAY,GACZC,EAAY,UACZC,EAAe,UACfC,EAAc,UACdC,EAAa,GAGfC,EAAa,GAEbC,EAAY,CACZC,WAAY,GACZC,WAAY,GAGhBC,GAAKC,KAAKC,MAAMC,aAAaC,QAAQ,cAC3B,MAANJ,KACAH,EAAYG,IAChBK,QAAQC,IAAIT,GAEZ,IAAIU,EAAS,CACTC,IAAK,CACDC,EAAG,EACHC,EAAG,IAEPC,IAAK,CACDF,EAAG,EACHC,EAAG,GAEPE,MAAO,CACH,CAACH,EAAG,EAAGC,EAAG,IACV,CAACD,EAAG,EAAGC,EAAG,IACV,CAACD,EAAG,EAAGC,EAAG,MAIdG,EAAO,GAEX,SAASC,IACLzB,EAAS0B,SAASC,eAAe,UACjC1B,EAAMD,EAAO4B,WAAW,MAExB5B,EAAO6B,MAAQ7B,EAAO8B,OAAS,IAE/B7B,EAAI8B,UAAY5B,EAChBF,EAAI+B,SAAS,EAAG,EAAGhC,EAAO6B,MAAO7B,EAAO8B,QAExCG,IAEAP,SAASQ,iBAAiB,UAAWC,GAGzC,SAASA,EAAQC,GAELC,OADMD,EAAEC,SAEP,KAAA,GAKA,KAAA,GACoB,IAAjBnB,EAAOI,IAAIF,IACXF,EAAOI,IAAM,CAAEF,GAAI,EAAGC,EAAG,IAC7B,MAEC,KAAA,GAKA,KAAA,GACoB,IAAjBH,EAAOI,IAAID,IACXH,EAAOI,IAAM,CAAEF,EAAG,EAAGC,GAAI,IAC7B,MAEC,KAAA,GAKA,KAAA,IACqB,IAAlBH,EAAOI,IAAIF,IACXF,EAAOI,IAAO,CAAEF,EAAG,EAAGC,EAAG,IAC7B,MAEC,KAAA,GAKA,KAAA,IACqB,IAAlBH,EAAOI,IAAID,IACXH,EAAOI,IAAO,CAAEF,EAAG,EAAGC,EAAG,KAMzC,SAASiB,IACLrC,EAAI8B,UAAY5B,EAChBF,EAAI+B,SAAS,EAAG,EAAGhC,EAAO6B,MAAO7B,EAAO8B,QAEpCS,IAAAA,EAAOvC,EAAO6B,MAAQ3B,EAE1BD,EAAI8B,UAAY1B,EAChBJ,EAAI+B,SAASR,EAAKJ,EAAImB,EAAMf,EAAKH,EAAIkB,EAAMA,EAAMA,GAEjDC,EAAYD,GAGhB,SAASC,EAAYD,GACjBtC,EAAI8B,UAAY3B,EACCc,IAFM,EAENA,EAAAA,EAAAA,EAAOK,OAFD,IAEQ,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAtBkB,IAAAA,EAAsB,EAAA,MAC3BxC,EAAI+B,SAASS,EAAKrB,EAAImB,EAAME,EAAKpB,EAAIkB,EAAMA,EAAMA,IAH9B,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,KAO3B,SAASN,IACLT,EAAO,CACHJ,EAAGsB,KAAKC,MAAMD,KAAKE,SAAW1C,GAC9BmB,EAAGqB,KAAKC,MAAMD,KAAKE,SAAW1C,IAGjBgB,IANC,EAMDA,EAAAA,EAAAA,EAAOK,OANN,IAMa,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAtBkB,IAAAA,EAAsB,EAAA,MACvBA,GAAAA,EAAKrB,IAAMI,EAAKJ,GAAKqB,EAAKpB,IAAMG,EAAKH,EAC9BY,OAAAA,KARG,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,KAatB,SAASY,IACD3B,EAAOC,IAAIC,EAAI,EACfF,EAAOC,IAAIC,EAAIlB,EAAY,EAG3BgB,EAAOC,IAAIC,IAAMlB,EAIjBgB,EAAOC,IAAIE,EAAI,EACfH,EAAOC,IAAIE,EAAInB,EAAY,EAG3BgB,EAAOC,IAAIE,IAAMnB,IACjBgB,EAAOC,IAAIE,EAAI,GARfH,EAAOC,IAAIC,EAAI,EAYvB,SAAS0B,IAQDtB,GAPJN,EAAOC,IAAIC,GAAKF,EAAOI,IAAIF,EAC3BF,EAAOC,IAAIE,GAAKH,EAAOI,IAAID,EAE3BwB,IAEA3B,EAAOK,MAAMwB,KAAS7B,EAAAA,GAAAA,EAAOC,MAEzBK,EAAKJ,IAAMF,EAAOC,IAAIC,GAAKI,EAAKH,IAAMH,EAAOC,IAAIE,EAAG,CAChDH,GAAwB,MAAxBA,EAAOK,MAAMyB,OAEb,YADAzC,EAAa,OAGjB0B,SAGAf,EAAOK,MAAM0B,QAGbC,IAnBY,EAmBZA,EAAM,EACOhC,EAAAA,EAAAA,EAAOK,OApBR,IAoBe,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAtBkB,IAAAA,EAAsB,EAAA,MACvBA,GAAAA,EAAKrB,IAAMF,EAAOC,IAAIC,GAAKqB,EAAKpB,IAAMH,EAAOC,IAAIE,KACjD6B,EACU,EAEN,YADA3C,EAAa,SAxBT,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,KA+BpB,SAAS4C,IACD3C,EAAUE,WAAaQ,EAAOK,MAAMyB,SACpCxC,EAAUE,WAAaQ,EAAOK,MAAMyB,QAExCxC,EAAUC,WAAWsC,KAAK7B,EAAOK,MAAMyB,QACnCxC,EAAUC,WAAWuC,OAAS,IAC9BxC,EAAUC,WAAWwC,QAEzBnC,aAAasC,QAAQ,YAAaxC,KAAKyC,UAAU7C,IACjD8C,MAAa/C,OAAAA,OAAAA,EACJW,oBAAAA,OAAAA,EAAOK,MAAMyB,OACdxC,kBAAAA,OAAAA,EAAUE,WACVF,kBAAAA,OAAAA,EAAUC,aAGtB,SAAS8C,IACCC,IAAAA,EAAWC,YAAY,WACzBX,IAEIvC,GACAmD,cAAcF,GACdL,KAEAb,KAGL,IAAOhC,GAGdmB,IACA8B","file":"snakegame.2991d4a4.js","sourceRoot":"..\\public","sourcesContent":["const GRID_SIZE = 20\r\nconst BG_COLOUR = '#231f20'\r\nconst SNAKE_COLOUR = '#c2c2c2'\r\nconst FOOD_COLOUR = '#e66916'\r\nconst FRAME_RATE = 10\r\n\r\nlet canvas, ctx\r\nlet gameActive = ''\r\n\r\nlet localData = {\r\n    last_score: [],\r\n    best_score: 3\r\n}\r\n\r\nls = JSON.parse(localStorage.getItem('localData'))\r\nif (ls != null)\r\n    localData = ls\r\nconsole.log(localData)\r\n\r\nlet player = {\r\n    pos: {\r\n        x: 3,\r\n        y: 10,\r\n    },\r\n    vel: {\r\n        x: 1,\r\n        y: 0,\r\n    },\r\n    snake: [\r\n        {x: 1, y: 10},\r\n        {x: 2, y: 10},\r\n        {x: 3, y: 10},\r\n    ],\r\n}\r\n\r\nlet food = {}\r\n\r\nfunction init() {\r\n    canvas = document.getElementById('canvas')\r\n    ctx = canvas.getContext('2d')\r\n\r\n    canvas.width = canvas.height = 600\r\n\r\n    ctx.fillStyle = BG_COLOUR\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n    randomFood()\r\n\r\n    document.addEventListener('keydown', keydown)\r\n}\r\n\r\nfunction keydown(e) {\r\n    let keyCode = e.keyCode\r\n    switch (keyCode) {\r\n        case 37: { // left\r\n            if (player.vel.x !== 1)\r\n                player.vel = { x: -1, y: 0 }\r\n            break\r\n        }\r\n        case 65: { // left\r\n            if (player.vel.x !== 1)\r\n                player.vel = { x: -1, y: 0 }\r\n            break\r\n        }\r\n        case 38: { // up\r\n            if (player.vel.y !== 1)\r\n                player.vel = { x: 0, y: -1 }\r\n            break\r\n        }\r\n        case 87: { // up\r\n            if (player.vel.y !== 1)\r\n                player.vel = { x: 0, y: -1 }\r\n            break\r\n        }\r\n        case 39: { // right\r\n            if (player.vel.x !== -1)\r\n                player.vel =  { x: 1, y: 0 }\r\n            break\r\n        }\r\n        case 68: { // right\r\n            if (player.vel.x !== -1)\r\n                player.vel =  { x: 1, y: 0 }\r\n            break\r\n        }\r\n        case 40: { // down\r\n            if (player.vel.y !== -1)\r\n                player.vel =  { x: 0, y: 1 }\r\n            break\r\n        }\r\n        case 83: { // down\r\n            if (player.vel.y !== -1)\r\n                player.vel =  { x: 0, y: 1 }\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nfunction paintGame() {\r\n    ctx.fillStyle = BG_COLOUR\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n    let size = canvas.width / GRID_SIZE\r\n\r\n    ctx.fillStyle = FOOD_COLOUR\r\n    ctx.fillRect(food.x * size, food.y * size, size, size)\r\n\r\n    paintPlayer(size)\r\n}\r\n\r\nfunction paintPlayer(size) {\r\n    ctx.fillStyle = SNAKE_COLOUR\r\n    for (let cell of player.snake) {\r\n        ctx.fillRect(cell.x * size, cell.y * size, size, size)\r\n    }\r\n}\r\n\r\nfunction randomFood() {\r\n    food = {\r\n        x: Math.floor(Math.random() * GRID_SIZE),\r\n        y: Math.floor(Math.random() * GRID_SIZE),\r\n    }\r\n\r\n    for (let cell of player.snake) {\r\n        if (cell.x === food.x && cell.y === food.y) {\r\n            return randomFood()\r\n        }\r\n    }\r\n}\r\n\r\nfunction checkWall() {\r\n    if (player.pos.x < 0) {\r\n        player.pos.x = GRID_SIZE - 1\r\n        return\r\n    }\r\n    if (player.pos.x === GRID_SIZE) {\r\n        player.pos.x = 0\r\n        return\r\n    }\r\n    if (player.pos.y < 0) {\r\n        player.pos.y = GRID_SIZE - 1\r\n        return\r\n    }\r\n    if (player.pos.y === GRID_SIZE) {\r\n        player.pos.y = 0\r\n    }\r\n}\r\n\r\nfunction gameLoop() {\r\n    player.pos.x += player.vel.x\r\n    player.pos.y += player.vel.y\r\n\r\n    checkWall()\r\n\r\n    player.snake.push({...player.pos})\r\n\r\n    if (food.x === player.pos.x && food.y === player.pos.y) {\r\n        if (player.snake.length === 400){\r\n            gameActive = 'WIN'\r\n            return\r\n        }\r\n        randomFood()\r\n    }\r\n    else {\r\n        player.snake.shift()\r\n    }\r\n\r\n    let cnt = 0\r\n    for (let cell of player.snake) {\r\n        if (cell.x === player.pos.x && cell.y === player.pos.y) {\r\n            cnt++\r\n            if (cnt > 1) {\r\n                gameActive = 'LOSE'\r\n                return\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction endGame(){\r\n    if (localData.best_score < player.snake.length)\r\n        localData.best_score = player.snake.length\r\n\r\n    localData.last_score.push(player.snake.length)\r\n    if (localData.last_score.length > 10)\r\n        localData.last_score.shift()\r\n\r\n    localStorage.setItem('localData', JSON.stringify(localData))\r\n    alert(`YOU ${gameActive}!\\n\r\n    Score: ${player.snake.length}\\n\r\n    Best: ${localData.best_score}\\n\r\n    Last: ${localData.last_score}`)\r\n}\r\n\r\nfunction startGameInterval() {\r\n    const interval = setInterval(() => {\r\n        gameLoop()\r\n\r\n        if (gameActive) {\r\n            clearInterval(interval)\r\n            endGame()\r\n        } else {\r\n            paintGame()\r\n        }\r\n\r\n    }, 1000 / FRAME_RATE)\r\n}\r\n\r\ninit()\r\nstartGameInterval()\r\n"]}