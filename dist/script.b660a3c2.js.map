{"version":3,"sources":["../src/messenger/script.js"],"names":["message","list","document","querySelector","ls","JSON","parse","localStorage","getItem","console","log","i","length","insertAdjacentHTML","addMessage","text","innerHTML","push","setItem","stringify","form","addEventListener","event","preventDefault","input","value","trim","focus"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAIA,OAAO,GAAG,EAAd;AAEA,IAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,WAAvB,CAAb;AAEA,IAAIC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAT;AACA,IAAIJ,EAAE,IAAI,IAAV,EACIJ,OAAO,GAAGI,EAAV;AACJK,OAAO,CAACC,GAAR,CAAYV,OAAZ;;AAEA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,OAAO,CAACY,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpCV,EAAAA,IAAI,CAACY,kBAAL,CAAwB,WAAxB,sCAA+Db,OAAO,CAACW,CAAD,CAAtE;AACH,EAED;;;AACA,SAASG,UAAT,CAAoBC,IAApB,EAAyB;AACrB,MAAIf,OAAO,CAACY,MAAR,GAAiB,EAArB,EACA;AACIZ,IAAAA,OAAO,GAAG,EAAV;AACAC,IAAAA,IAAI,CAACe,SAAL,GAAiB,EAAjB;AACH;;AAEDhB,EAAAA,OAAO,CAACiB,IAAR,CAAaF,IAAb;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACAO,EAAAA,YAAY,CAACW,OAAb,CAAqB,SAArB,EAAgCb,IAAI,CAACc,SAAL,CAAenB,OAAf,CAAhC,EATqB,CAWrB;;AACAC,EAAAA,IAAI,CAACY,kBAAL,CAAwB,WAAxB,sCAA+DE,IAA/D;AACH,EAED;;;AACA,IAAMK,IAAI,GAAGlB,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAAb;AACAiB,IAAI,CAACC,gBAAL,CAAsB,QAAtB,EAAgC,UAAAC,KAAK,EAAI;AACrCA,EAAAA,KAAK,CAACC,cAAN,GADqC,CAGrC;;AACA,MAAMC,KAAK,GAAGtB,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAAd,CAJqC,CAMrC;;AACA,MAAMY,IAAI,GAAGS,KAAK,CAACC,KAAN,CAAYC,IAAZ,EAAb;;AAEA,MAAGX,IAAI,KAAI,EAAX,EAAc;AACVD,IAAAA,UAAU,CAACC,IAAD,CAAV;AACAS,IAAAA,KAAK,CAACC,KAAN,GAAc,EAAd;AACAD,IAAAA,KAAK,CAACG,KAAN;AACH;AACJ,CAdD","file":"script.b660a3c2.js","sourceRoot":"..\\public","sourcesContent":["//Create an array where the message along with its ID will be stored.\r\nlet message = []\r\n\r\nconst list = document.querySelector('.messages')\r\n\r\nlet ls = JSON.parse(localStorage.getItem('message'))\r\nif (ls != null)\r\n    message = ls\r\nconsole.log(message)\r\n\r\nfor (let i = 0; i < message.length; i++){\r\n    list.insertAdjacentHTML('beforeend',`<p class=\"message-item\">${message[i]}</p>`)\r\n}\r\n\r\n// This function will enable us to add the message to the DOM\r\nfunction addMessage(text){\r\n    if (message.length > 10)\r\n    {\r\n        message = []\r\n        list.innerHTML = \"\"\r\n    }\r\n\r\n    message.push(text)\r\n    console.log(message)\r\n    localStorage.setItem('message', JSON.stringify(message))\r\n\r\n    //Render message to the screen\r\n    list.insertAdjacentHTML('beforeend',`<p class=\"message-item\">${text}</p>`)\r\n}\r\n\r\n//Create event listener to detect when a message has been submitted\r\nconst form = document.querySelector('.message-form')\r\nform.addEventListener('submit', event => {\r\n    event.preventDefault()\r\n\r\n    //input to save the message itself\r\n    const input = document.querySelector('.typedMessage')\r\n\r\n    //This helps us to detect empty messages and ignore them\r\n    const text = input.value.trim()\r\n\r\n    if(text !==''){\r\n        addMessage(text)\r\n        input.value = ''\r\n        input.focus()\r\n    }\r\n})\r\n"]}